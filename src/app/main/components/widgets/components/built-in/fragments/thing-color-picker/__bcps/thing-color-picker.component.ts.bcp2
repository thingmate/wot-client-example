import { IRGBColor } from '@lifaon/color';
import { Abortable, AsyncTask } from '@lirx/async-task';
import {
  $$map,
  $log, createUnicastSource, debounceTime$$,
  distinct$$$,
  IDefaultNotificationsUnion,
  IObservable,
  IObserver,
  let$$, map$$, merge,
  notificationsToImmediate$$$,
  pipe$$,
  shareRL$$$, signal, single, switchMap$$,
  switchMap$$$, toSignal,
} from '@lirx/core';
import { compileReactiveHTMLAsComponentTemplate, compileStyleAsComponentStyle, createComponent, VirtualCustomElementNode } from '@lirx/dom';
import { MatLoadingComponent } from '@lirx/dom-material';
import { are_rgbcw_equal, cw_to_cct, IColorThingProperty, IRGBCW } from '@thingmate/wot-scripting-api';
import { fromPushSourceWithBackPressure } from '../../../../../../../../misc/from-push-source-with-back-pressure';
import { WidgetColorPickerComponent } from '../../../fragments/widget-color-picker/widget-color-picker.component';
import { WidgetRangePickerComponent } from '../../../fragments/widget-range-picker/widget-range-picker.component';

// @ts-ignore
import html from './thing-color-picker.component.html?raw';
// @ts-ignore
import style from './thing-color-picker.component.scss?inline';

/**
 * COMPONENT: 'app-thing-color-picker'
 **/

interface IData {
  readonly loading$: IObservable<boolean>;
  readonly $colorPickerRGB: IObserver<IRGBColor>;
  readonly colorPickerRGB$: IObservable<IRGBColor>;
  // readonly $temperature: IObserver<number>;
  // readonly temperature$: IObservable<number>;
  // readonly $brightness: IObserver<number>;
  // readonly brightness$: IObservable<number>;
}

interface IThingColorPickerComponentConfig {
  element: HTMLElement;
  inputs: [
    ['property', IColorThingProperty],
  ],
  data: IData;
}

export const ThingColorPickerComponent = createComponent<IThingColorPickerComponentConfig>({
  name: 'app-thing-color-picker',
  template: compileReactiveHTMLAsComponentTemplate({
    html,
    customElements: [
      WidgetColorPickerComponent,
      MatLoadingComponent,
      WidgetRangePickerComponent,
    ],
  }),
  styles: [compileStyleAsComponentStyle(style)],
  inputs: [
    ['property'],
  ],
  init: (node: VirtualCustomElementNode<IThingColorPickerComponentConfig>): IData => {
    const property$ = node.inputs.get$('property');

    const loading = signal<boolean>(true);

    const color = signal<IRGBCW>({
      r: 0,
      g: 0,
      b: 0,
      c: 0,
      w: 0,
    });

    const $colorPickerRGB = (rgb: IRGBColor): void => {
      color.set({
        ...rgb,
        c: 0,
        w: 0,
      });
    };

    const { emit: $writePropertyColor, subscribe: _writePropertyColor$ } = createUnicastSource();

    const writePropertyColor$ = debounceTime$$(_writePropertyColor$, 500);

    property$((property: IColorThingProperty): void => {
      writePropertyColor$(() => {

      });

      property.observe()((value: IRGBCW, abortable: Abortable): AsyncTask<void> => {
        color.set(value);
        loading.set(false);
        return AsyncTask.void(abortable);
      }, Abortable.never);
    });


    const loading$ = loading.toObservable();
    const colorPickerRGB$ = color.toObservable();


    return {
      loading$,
      $colorPickerRGB,
      colorPickerRGB$,
    };
  },
});
